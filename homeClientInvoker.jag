<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function () {
    var log = new Log();
    var USER_TOKEN = "user";
    var AUTHORIZATION_HEADER = "Authorization";
    var USER_TOKEN = "user";
    var TENANT_DOMAIN = "domain";
    var CONST_AT = "@";
    var USERNAME = "username";
    response.contentType = 'application/json';

    var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
    var AnalyticsCachedJSServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector;
    var AnalyticsCache = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector.AnalyticsCache;

    if (request) {

        var token = session.get(USER_TOKEN);
        var authParam = request.getHeader(AUTHORIZATION_HEADER);

        if (authParam != null) {
            var credentials = JSUtils.authenticate(authParam);
            loggedInUser = credentials[0];
            log.info("user is authenticated!");
        } else {
            if (token != null) {
                var loggedInUser = token[USERNAME] + CONST_AT + token[TENANT_DOMAIN];
                log.info("user is authenticated!");
                log.info(loggedInUser);
            } else {
                log.error("user is not authenticated!");
                response.status = HTTP_USER_NOT_AUTHENTICATED;
                print('{ "status": "Failed", "message": "User is not authenticated." }');
                return;
            }
        }

        var cache = application.get("AnalyticsWebServiceCache");
        if (cache == null) {
            cache = new AnalyticsCache(cacheTimeoutSeconds, cacheSizeBytes);
            application.put("AnalyticsWebServiceCache", cache);
        }
        var connector = new AnalyticsCachedJSServiceConnector(cache);
        var data = request.getContent();
        var result = connector.getTableSchema(loggedInUser, data.tableName).getMessage();
        result = JSON.parse(result);
        print(result);
    } else {
        log.error("Payload can't be empty, So you can't request access token from authorization server 2222");
    }
}());
%>
